generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Enums for fixed values
enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING

}

enum surveysubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING

}

enum SubscriptionType {
  WEEKLY
  MONTHLY
}

model AppUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String
  points      Int      @default(0)
  avatar      String?  @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  
  subscriptionStatus SubscriptionStatus @default(INACTIVE) 
  surveysubscriptionStatus SubscriptionStatus @default(INACTIVE) 
  currentSubscriptionId String? @db.ObjectId // Tracks the active subscription (if any)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations 
  videos      Video[]
  surveys     Survey[]
  attempts    QuestionAttempt[]
  rewards     Reward[]
  payments    Payment[]
  questions   Question[]


  UploadQuestionQuestion UploadQuestion[]

  UploadSurvey UploadSurvey[]

 

  SurveyResponse SurveyResponse[]

  Response Response[]

  Comment Comment[]

  Ad Ad[]
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  videoUrl    String
  thumbnail   String  
  userId      String   @db.ObjectId
  user        AppUser  @relation(fields: [userId], references: [id])
  likes       Int      @default(0)
  views       Int      @default(0)
  isBookmarked Boolean @default(false)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commentsCount Int    @default(0)
  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  mediaUrls String[] @default([])
  userId    String   @db.ObjectId
  videoId   String   @db.ObjectId
  user      AppUser  @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Survey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String         // Survey title
  description String?        // Optional survey description
  userId      String         @db.ObjectId // User who created the survey
  user        AppUser        @relation(fields: [userId], references: [id])
     // Questions created via the form
  uploads     UploadSurvey[] // Questions uploaded via a file
  startDate   DateTime       // Survey start time
  endDate     DateTime       // Survey end time
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  SurveyResponse SurveyResponse[]
}


model UploadSurvey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String   // The question text
  type        String   // Question type (e.g., "text", "radio", "checkbox", etc.)
  options     String   // Store options as a JSON string
  placeholder String?  // Optional placeholder for input fields
  minValue    Int?     // Optional minimum value for rating questions
  maxValue    Int?     // Optional maximum value for rating questions
  userId      String   @db.ObjectId // User who uploaded the question
  surveyId    String   @db.ObjectId // Survey this question belongs to
  user        AppUser  @relation(fields: [userId], references: [id])
  survey      Survey   @relation(fields: [surveyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ad {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String
  targetUrl   String?
  type        String?  @default("regular") // 'regular', 'featured', 'banner'
  sponsored   Boolean  @default(false)
  views       Int      @default(0)
  clicks      Int      @default(0)
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  userId      String   @db.ObjectId
  user        AppUser  @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([isActive])
}

model SurveyResponse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId // User who submitted the response
  surveyId    String   @db.ObjectId // Survey this response belongs to
  responses   String   // Store responses as a JSON string
  user        AppUser  @relation(fields: [userId], references: [id])
  survey      Survey   @relation(fields: [surveyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@map("survey_responses") // Explicit table name mapping
}

model RewardQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  options       Json     // Structured options as JSON
  correctAnswer String   // Correct option/answer ID or value
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  attempts      RewardQuestionOnAttempt[]
}

model RewardQuestionOnAttempt {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  rewardQuestionId  String           @db.ObjectId
  rewardQuestion    RewardQuestion   @relation(fields: [rewardQuestionId], references: [id])
  questionAttemptId String           @db.ObjectId
  questionAttempt   QuestionAttempt  @relation(fields: [questionAttemptId], references: [id])

  @@index([rewardQuestionId, questionAttemptId])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  userId    String   @db.ObjectId // Ensure this matches the ID type in AppUser
  user      AppUser  @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  responses     Response[]

  attempts      QuestionAttempt[]
}

model Response {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  responseText        String
  userId   String  @db.ObjectId
  user        AppUser  @relation(fields: [userId], references: [id])
  questionId  String   @db.ObjectId
  question    Question @relation(fields: [questionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, questionId]) // Index for faster queries
}

model UploadQuestion {
  id          String   @id @default(cuid()) @map("_id")
  text        String
  type        String
  options     String[] // Store options as JSON
  correctAnswers String[] // Store correct answers as JSON
  placeholder String?
  minValue    Int?
  maxValue    Int?
  userId      String   @db.ObjectId
  user        AppUser  @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model QuestionAttempt {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail     String
  user          AppUser  @relation(fields: [userEmail], references: [email])
  questionId    String   @db.ObjectId
  question      Question @relation(fields: [questionId], references: [id])
  selectedAnswer String
  isCorrect      Boolean
  attemptedAt    DateTime @default(now())

  @@index([userEmail, questionId]) // Index for faster queries
  rewardQuestions RewardQuestionOnAttempt[]
}

model Reward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String
  user        AppUser  @relation(fields: [userEmail], references: [email])

  points      Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userEmail]) // Index for faster queries
}

model Payment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  phoneNumber String
  provider    String
  TransactionId String @unique
  status      PaymentStatus  @default(PENDING) 
  subscriptionType SubscriptionType // Weekly or Monthly
  startDate   DateTime  // Subscription start time
  endDate     DateTime // Subscription end time
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // Relation to AppUser
  userId      String   @db.ObjectId
  user        AppUser  @relation(fields: [userId], references: [id])

  @@index([userId, status]) 
}
